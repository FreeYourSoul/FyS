class SampyActionDesc {
    var percentage;
    var action;
    var actionName;

    def SampyActionDesc(x, y, z) {
        this.actionName = x;
        this.action = y;
        this.percentage = z;
    }

    def Action(actionName, percentage) { // maybe send directly an instance of the type wanted
        this.percentage = percentage
        this.actionName = actionName // create instance of wanted class thanks to this
    }
}

class Attack {

    def Attack() {}

    def decideAction() {
        return true;
    }

    def requireAllyTarget() {
        return false
    }

    def requireEnemyTarget() {
        return false
    }

    def execute() {
        return false
    }

    def getId() {
        return 1
    }

};

//Sample Monster Used For testing Purpose :-D
class Sampy {

    var id;
    var baseDamage;
    var criticalDamage;
    var isEnemySelected;
    var isFriendTargetSelected;
    var actionList;

    def Sampy(contenderId) {
        this.id = contenderId
        this.baseDamage = 20
        this.criticalDamage = 20
        this.actionList = [
            SampyActionDesc("baseAttack", Attack(), 50),
            SampyActionDesc("groundStrike", Attack(), 20)
        ]
    }

    // select action strategy
    def decideAction() {

    }

    // EnnemyTarget selection strategy
    def decideTarget(requireEnemyTarget, requireAllyTarget) : requireEnemyTarget && !requireAllyTarget {
        var target;
        this.isEnemySelected = true;
        return target;
    }

    // AllyTarget selection strategy
    def decideTarget(requireEnemyTarget, requireAllyTarget) : !requireEnemyTarget && requireAllyTarget {
        var target;
        this.isFriendTargetSelected = true;
        return target;
    }

    // Impossible targeting
    def decideTarget(requireEnemyTarget, requireAllyTarget) : requireEnemyTarget && requireAllyTarget {
        print("[ERROR] : Only one target can be taken");
        return;
    }
    // no targeting
    def decideTarget(requireEnemyTarget, requireAllyTarget) : !requireEnemyTarget && !requireAllyTarget {
        return;
    }

    def runScriptedAction(id) {
        var &thisContender = pitContenders.getFightingContender(id);
        var &thisStatus = thisContender.accessStatus();

        return 1;
    }

    def defineSpawningPosition() {

    }

};
