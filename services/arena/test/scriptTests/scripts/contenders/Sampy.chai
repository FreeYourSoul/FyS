class SampyActionDesc {
    var percentage;
    var action;
    var actionName;

    def Action(actionName, percentage) { // maybe send directly an instance of the type wanted
        this.percentage = percentage;
        this.actionName = actionName; // create instance of wanted class thanks to this
    }
};

/*
Sample Monster Used For testing Purpose :-D
*/
class Sampy {

    var id;
    var baseDamage = 0;
    var criticalDamage = 0;

    var isEnemySelected = false;
    var isFriendTargetSelected = false;

    var actionList = 
    [
        SampyActionDesc("baseAttack", 50),
        SampyActionDesc("groundStrike", 20)
    ]

    def Sampy(contenderId) { 
        this.id = contenderId
        this.baseDamage = 20;
        this.criticalDamage = 20;
    }

    // select action strategy
    def decideAction() {
        var rng = ;
        var accumulate = 0;
        for (var i = 0; i < actionList.size(); ++i) {
            accumulate += actionList[i].percentage;
            if (accumulate > rng) {
                return actionList[i].action;
            }
        }
        return actionList[0].action;
    }

    // EnnemyTarget selection strategy
    def decideTarget(requireEnnemyTarget, requireAllyTarget) : requireEnnemyTarget && !requireAllyTarget {
        var target;
        this.isEnemySelected = true;
        return target;
    }

    // AllyTarget selection strategy
    def decideTarget(requireEnnemyTarget, requireAllyTarget) : !requireEnnemyTarget && requireAllyTarget {
        var target;
        this.isFriendTargetSelected = true;
        return target;
    }

    // Impossible targeting
    def decideTarget(requireEnnemyTarget, requireAllyTarget) : requireEnnemyTarget && requireAllyTarget {
        print("[ERROR] : Only one target can be taken");
        return;
    }
    // no targeting
    def decideTarget(requireEnnemyTarget, requireAllyTarget) : !requireEnnemyTarget && !requireAllyTarget {
        return;
    }

    def runScriptedAction() {
        var action = this.decideAction();
        var target = this.decideTarget(action.requireEnnemyTarget(), action.requireAllyTarget());
        var targetId = "";

        if (target.is_var_def()) {
            if (action.requireEnnemyTarget()) {
                targetId = "E";
            }
            else  {
                targetId = "F";
            }
            targetId += target.getId();
        }
        if (!action.execute(this.id, target)) {
            return false;
        }
        Sampy_sendContenderAction(targetId, this.id, action.getId());
        return true;
    }

    def defineSpawningPosition() {
        
    }

};
