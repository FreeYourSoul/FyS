// MIT License
//
// Copyright (c) 2019 Quentin Balland
// Repository : https://github.com/FreeYourSoul/FyS
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
//         of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
//         to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//         copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
//         copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//         AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <InventoryServerContext.hh>
#include <FlatbufferGenerator.hh>
#include <exchange/ExchangeManager.hh>

namespace fys::inv {

ExchangeManager::ExchangeManager(const InventoryServerContext& ctx)
		:
		common::DirectConnectionManager(1, ctx.getPlayerConnectionString()),
		_inventoryServerCode(ctx.getServerCode()) { }

const ExchangeRoom&
ExchangeManager::makeExchangeRoom(ItemManager& itemManager, std::string initiator, std::string receiver, std::string identity)
{
	// The identity with the initiator of the exchange transaction is used as base for the token
	// used for the the transaction. It is a string randomly generated by ZMQ that is more or less
	// a UUID.  Which makes it a perfect candidate for being used that way.
	auto newRoom = ExchangeRoom(_currentRoomId, std::move(initiator), std::move(receiver),
			std::move(identity), generateToken(identity), itemManager);

	// insert a new Exchange room in the current transactions
	_rooms.insert(std::pair(_currentRoomId, std::move(newRoom)));

	// increment id for next exchange room
	return _rooms.at(_currentRoomId++);
}

void
ExchangeManager::terminateRoomTransaction(ItemManager& manager, const RoomAccessor& accessor)
{

	// remove room from current transactions
	_rooms.erase(accessor.idExchange);
}

void
ExchangeManager::lockRoomTransaction(const RoomAccessor& accessor)
{
	auto it = _rooms.find(accessor.idExchange);
	if (it != _rooms.end()) {
		it->second.lockExchange(accessor.userName, accessor.tokenExchange);
	}
	else {
		SPDLOG_ERROR("[Exchange : Room {}] Doesn't exist", accessor.idExchange);
	}
}

void
ExchangeManager::removeItemFromRoom(ItemManager& manager, const RoomAccessor& accessor,
		const std::string& itemCode, uint quantity)
{
	auto it = _rooms.find(accessor.idExchange);
	if (it != _rooms.end()) {
		it->second.removeItemFromExchangeForPlayer(accessor.userName, accessor.tokenExchange, Item{itemCode, quantity});
	}
	else {
		SPDLOG_ERROR("[Exchange : Room {}] Doesn't exist", accessor.idExchange);
	}
}

void
ExchangeManager::addItemInRoom(ItemManager& manager, const RoomAccessor& accessor,
		const std::string& itemCode, uint quantity)
{
	auto it = _rooms.find(accessor.idExchange);
	if (it != _rooms.end()) {
		it->second.addItemFromExchangeForPlayer(accessor.userName, accessor.tokenExchange, Item{itemCode, quantity});
	}
	else {
		SPDLOG_ERROR("[Exchange : Room {}] Doesn't exist", accessor.idExchange);
	}
}

void
ExchangeManager::receiverJoinRoomTransaction(const RoomAccessor& accessor, std::string identityReceiver)
{
	auto it = _rooms.find(accessor.idExchange);
	if (it != _rooms.end()) {
		it->second.receiverJoin(accessor.userName, accessor.tokenExchange, std::move(identityReceiver));
	}
	else {
		SPDLOG_ERROR("[Exchange : Room {}] Doesn't exist", accessor.idExchange);
	}
}

std::string
ExchangeManager::generateToken(const std::string& tokenBase) const
{
	return std::to_string(_currentRoomId).append(_inventoryServerCode).append(tokenBase);
}

}