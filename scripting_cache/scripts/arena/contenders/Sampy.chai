//<><><><><><><><><><><><><><><><><><><><><>  ACTIONS  <><><><><><><><><><><><><><><><><><><><><><><>

class Sleep {
    def Sleep() {}

    def requireAllyTarget() {
        return 0;
    }

    def requireEnemyTarget() {
        return 0;
    }

    def execute(targetStatus) {
        targetStatus.magicPoint.current = 42;
        return 1;
    }

    def rangeAnySide() {
        return 0;
    }

    def getId() {
        return 0;
    }
};

class Attack {
    var power;

    def Attack(v) {
        this.power = v;
    }

    def requireAllyTarget() {
        return 0;
    }

    def requireEnemyTarget() {
        return 1;
    }

    def rangeAnySide() {
        return 0;
    }

    def execute(targetStatus) {
        if (targetStatus.life.current > this.power) {
            targetStatus.life.current = targetStatus.life.current - this.power;
        }
        else {
            targetStatus.life.current = 0;
        }
        return 1;
    }

    def getId() {
        return 1;
    }

};


//<><><><><><><><><><><><><><><><><><><><><>  SAMPY  <><><><><><><><><><><><><><><><><><><><><><><>

class SampyActionDesc {
    var action;
    var actionName;

    def SampyActionDesc(x, y) {
        this.actionName = x;
        this.action = y;
    }

};


//Sample Monster Used For testing Purpose :-D
class Sampy {

    attr id;
    attr level;
    attr actions;

    def Sampy(contenderId, level) {
        this.level = level;
        this.id = contenderId;
        this.actions = [
            "baseAttack":   SampyActionDesc("baseAttack", Attack(50)),
            "groundStrike": SampyActionDesc("groundStrike", Attack(80)),
            "sleep":        SampyActionDesc("sleep", Sleep())
         ];
    }

    def setupContender() {
        var &thisContender = pitContenders.getFightingContender(this.id);
        var &thisStatus = thisContender.accessStatus();
        var addLifePerLevel = 150 * 0.02; // +2% life per level
        thisStatus.life.total   = 150 + (addLifePerLevel * this.level);
        thisStatus.life.current = thisStatus.life.total;
        thisStatus.magicPoint.total = 100;
        thisStatus.magicPoint.current = thisStatus.magicPoint.total;
     }

    def getActionByName(name) {
        return this.actions[name].action;
    }

    // select action strategy
    def decideAction(life) {
        var percent = life.current / life.total * 100;
        if (percent == 100) {
            this.getActionByName("sleep")
        }
        else if (percent < 50) {
            this.getActionByName("baseAttack");
        }
        else {
            this.getActionByName("groundStrike");
        }
    }

    // EnnemyTarget selection strategy
    def decideTarget(thisC, requireEnemyTarget, requireAllyTarget) : requireEnemyTarget == 1 && requireAllyTarget == 0 {
        var comparator = fun(current, next) { (current.accessStatus().life.current > next.accessStatus().life.current) ? 1 : 0; }
        allyPartyTeams.selectSuitableMemberOnSideAlive(thisC.getHexagonSideOrient(), comparator);
    }

    // AllyTarget selection strategy
    def decideTarget(thisC, requireEnemyTarget, requireAllyTarget) : requireEnemyTarget == 0 && requireAllyTarget == 1 {
        return 1;
    }

    // no targeting
    def decideTarget(thisC, requireEnemyTarget, requireAllyTarget) : requireEnemyTarget == 0 && requireAllyTarget == 0 {
        return thisC;
    }

    def runScriptedAction(id) {
        var &thisContender = pitContenders.getFightingContender(id);
        var &thisStatus = thisContender.accessStatus();
        var &action = this.decideAction(thisStatus.life);
        var &target = this.decideTarget(thisContender, action.requireEnemyTarget(), action.requireAllyTarget());
        return action.execute(target.accessStatus());
    }

};
