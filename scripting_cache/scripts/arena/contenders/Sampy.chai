//<><><><><><><><><><><><><><><><><><><><><>  ACTIONS  <><><><><><><><><><><><><><><><><><><><><><><>

class Sleep_SAMPY {
    def Sleep_SAMPY() {}

    def requireTarget() {
        NONE;
    }

    def execute(targetStatus) {
        targetStatus.magicPoint.current = 42;
        1;
    }

    def rangeAnySide() {
        0;
    }

};

class Attack_SAMPY {
    var power;

    def Attack_SAMPY(v) {
        this.power = v;
    }

    def requireTarget() {
        ENNEMY;
    }

    def execute(targetStatus) {
        if (targetStatus.life.current > this.power) {
            targetStatus.life.current = targetStatus.life.current - this.power;
        }
        else {
            targetStatus.life.current = 0;
        }
        1;
    }

};


//<><><><><><><><><><><><><><><><><><><><><>  SAMPY  <><><><><><><><><><><><><><><><><><><><><><><>


//Sample Monster Used For testing Purpose :-D
class Sampy {

    attr id; // todo remove id?
    attr level;
    attr actions;

    def Sampy(contenderId, level) {
        this.level = level;
        this.id = contenderId;

        this.actions = action(

            // possibles actions/decide target vector
            [
                action(Attack_SAMPY(50), fun(action, thisContender) {
                    decide_target.one_lower_life(action.requireTarget(), thisContender.getHexagonSideOrient());
                }),

                action(Attack_SAMPY(80), fun(action, thisContender) {
                    decide_target.one_lower_life(action.requireTarget(), thisContender.getHexagonSideOrient());
                }),

                action(Sleep_SAMPY(), fun(action, thisContender) {
                    thisContender;
                })
            ],

            // decide target function
            fun(currentContenderStatus) {
                var percent = currentContenderStatus.life.current / currentContenderStatus.life.total * 100;
                    if (percent == 100) {
                        2; // sleep
                    }
                    else if (percent < 50) {
                        0; // attack 80
                    }
                    else {
                        1; // attack 50
                    }
            }
        );
    }

    def setupContender() {
        var &thisContender = pitContenders.getFightingContender(this.id);
        var &thisStatus = thisContender.accessStatus();
        var addLifePerLevel = 150 * 0.02; // +2% life per level
        thisStatus.speed = 8;
        thisStatus.life.total   = 150 + (addLifePerLevel * this.level);
        thisStatus.life.current = thisStatus.life.total;
        thisStatus.magicPoint.total = 100;
        thisStatus.magicPoint.current = thisStatus.magicPoint.total;
     }

    def runScriptedAction(id) {
        var &thisContender = pitContenders.getFightingContender(id);
        var &thisStatus = thisContender.accessStatus();
        var actionId = this.actions.decisionStrategy(thisStatus);
        var &action = this.actions.act[actionId];
        var &target = action.decisionStrategy(action.act, thisContender);
        return action.act.execute(target.accessStatus());
    }

};
