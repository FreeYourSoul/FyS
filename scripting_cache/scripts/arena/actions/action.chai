// store an action and a decision strategy:
// - Can be a list of action with a decision strategy representing how it decides to select which actions to do
// - Can be a specific action with a decision strategy representing how it decides its target
class action {
    attr act;
    attr decisionStrategy;
    attr actionKey;

    def action(a, decisionStrategy, actionKey)
    {
        this.set_explicit(true);
        this.act = a;
        this.decisionStrategy = decisionStrategy;
        this.actionKey = actionKey;
    }

}

// utility function in order to retrieve the actions of a Contender,
// takes the vector of actions of the contender script as parameter
def retrieveDoableActions(Vector actions) {
    var actionsToReturn = [];
    for (actElem : actions) {
        if (actElem.actionKey.size() > 0) {
            actionsToReturn.push_back(actElem.actionKey);
        }
    }
    actionsToReturn;
}

// Apply damage taking into alterations account
def applyDamage(dmg, Vector alterationsId) {

}

// Apply restoration of life taking alterations into account
def applyRestorationLife(restoreLife, Vector alterationsId) {

}

// Apply restoration of mp taking alterations into account
def applyRestorationMp(restoreMp, Vector alterationsId) {

}